<?xml version="1.0" encoding="UTF-8"?>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_programName="나의메뉴 등록 팝업">
		<w2:type>DEFAULT</w2:type>
		<w2:buildDate />
		<xf:model>
			<xf:instance>
				<data xmlns="" />
			</xf:instance>
			<w2:dataCollection baseNode="map">
				<w2:dataList baseNode="list" id="dlt_myMenu" repeatNode="map" saveRemovedData="true" style="">
					<w2:columnInfo>
						<w2:column dataType="text" name="선택" id="chk" ignoreStatus="true"></w2:column>
						<w2:column id="syspayno" name="사번" dataType="text"></w2:column>
						<w2:column id="service_id" name="메뉴서비스코드" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_id" name="메뉴아이디"></w2:column>
						<w2:column id="menu_up_id" name="상위메뉴아이디" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_lvl" name="레벨"></w2:column>
						<w2:column dataType="text" id="menu_seq" name="정렬순서"></w2:column>
						<w2:column dataType="text" id="menu_folder_nm" name="메뉴명"></w2:column>
						<w2:column dataType="text" id="deleteAt" name="삭제여부"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="dlt_tempMymenu" repeatNode="map" saveRemovedData="true" style="">
					<w2:columnInfo>
						<w2:column dataType="text" name="선택" id="chk" ignoreStatus="true"></w2:column>
						<w2:column id="syspayno" name="사번" dataType="text"></w2:column>
						<w2:column id="service_id" name="메뉴서비스코드" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_id" name="메뉴아이디"></w2:column>
						<w2:column id="menu_up_id" name="상위메뉴아이디" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_lvl" name="레벨"></w2:column>
						<w2:column dataType="text" id="menu_seq" name="정렬순서"></w2:column>
						<w2:column dataType="text" id="menu_folder_nm" name="메뉴명"></w2:column>
						<w2:column dataType="text" id="deleteAt" name="삭제여부"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="dlt_addMenu" repeatNode="map" saveRemovedData="true" style="">
					<w2:columnInfo>
						<w2:column dataType="text" name="선택" id="chk" ignoreStatus="true"></w2:column>
						<w2:column id="syspayno" name="사번" dataType="text"></w2:column>
						<w2:column id="service_id" name="메뉴서비스코드" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_id" name="메뉴아이디"></w2:column>
						<w2:column id="menu_up_id" name="상위메뉴아이디" dataType="text"></w2:column>
						<w2:column dataType="text" id="menu_lvl" name="레벨"></w2:column>
						<w2:column dataType="text" id="menu_seq" name="정렬순서"></w2:column>
						<w2:column dataType="text" id="menu_folder_nm" name="메뉴명"></w2:column>
						<w2:column dataType="text" id="deleteAt" name="삭제여부"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
        		<w2:dataList baseNode="list" repeatNode="map" id="dlt_menu" saveRemovedData="true">
        			<w2:columnInfo>
        				<w2:column dataType="text" name="선택" id="chk" ignoreStatus="true"></w2:column>
        				<w2:column id="serviceID" name="화면ID" dataType="text"></w2:column>
        				<w2:column id="serviceCode" name="서비스코드" dataType="text"></w2:column>
        				<w2:column id="parentDivCode" name="부모코드" dataType="text"></w2:column>
        				<w2:column id="childNode" name="자식유무" dataType="text"></w2:column>
        				<w2:column id="serviceLevel" name="레벨" dataType="text"></w2:column>
        				<w2:column id="serviceOrder" name="정렬순서" dataType="text"></w2:column>
        				<w2:column id="cn" name="메뉴명" dataType="text"></w2:column>
        				<w2:column id="serviceUrl" name="EIP2화면경로" dataType="text"></w2:column>
        				<w2:column id="serviceNewUrl" name="EIP3화면경로" dataType="text"></w2:column>
        				<w2:column id="useYN" name="EIP3화면경로" dataType="text"></w2:column>
        				<w2:column id="permission" name="버튼권한" dataType="text"></w2:column>
        			</w2:columnInfo>
        		</w2:dataList>
        		<w2:dataList baseNode="list" repeatNode="map" id="dlt_tempAllMenu" saveRemovedData="true">
        			<w2:columnInfo>
        				<w2:column dataType="text" name="선택" id="chk" ignoreStatus="true"></w2:column>
        				<w2:column id="serviceID" name="화면ID" dataType="text"></w2:column>
        				<w2:column id="serviceCode" name="서비스코드" dataType="text"></w2:column>
        				<w2:column id="parentDivCode" name="부모코드" dataType="text"></w2:column>
        				<w2:column id="childNode" name="자식유무" dataType="text"></w2:column>
        				<w2:column id="serviceLevel" name="레벨" dataType="text"></w2:column>
        				<w2:column id="serviceOrder" name="정렬순서" dataType="text"></w2:column>
        				<w2:column id="cn" name="메뉴명" dataType="text"></w2:column>
        				<w2:column id="serviceUrl" name="EIP2화면경로" dataType="text"></w2:column>
        				<w2:column id="serviceNewUrl" name="EIP3화면경로" dataType="text"></w2:column>
        				<w2:column id="useYN" name="EIP3화면경로" dataType="text"></w2:column>
        				<w2:column id="permission" name="버튼권한" dataType="text"></w2:column>
        			</w2:columnInfo>
        		</w2:dataList>
        		<w2:dataMap baseNode="map" id="dma_param">
					<w2:keyInfo>
						<w2:key id="sn" name="사번" dataType="text"></w2:key>
						<w2:key id="cn" name="이름" dataType="text"></w2:key>
						<w2:key id="uid" name="사용자ID" dataType="text"></w2:key>
						<w2:key id="delDiv" name="name4" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
			</w2:dataCollection>
			<w2:workflowCollection></w2:workflowCollection>
			<xf:submission id="sbm_saveMyMenu" ref='data:json,{"action":"modified","id":"dlt_myMenu","key":"mymenuVoList"}' target=''
				action="MymenuListSave.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="" ev:submit="" ev:submitdone="" ev:submiterror="" abortTrigger="">
			</xf:submission>
		</xf:model>
		<script type="text/javascript" lazy="false"><![CDATA[
	/**********************************************************************
	 * →  전역변수
	 **********************************************************************/
	scwin.myMenuNullChk = false;
	scwin.node; //작업할노드
	scwin.contextList = [{
		value : 'update',
		label : '수정\n'
	}, {
		value : 'delete',
		label : '삭제\n'
	}]; //context-menu 호출시 필요한 항목을 설정하는 배열

	/**********************************************************************
	 * →  페이지
	 **********************************************************************/
	/**
	 * → 페이지 로드
	 */
	scwin.onpageload = function() {
		dma_param.setJSON(com.getLoginInfo());
		dlt_myMenu.setJSON($p.parent().dlt_myMenu.getAllJSON());
		if (dlt_myMenu.getRowCount() == 0)
			scwin.myMenuNull(scwin.myMenuNullChk);
		trv_myMenu.notifyDataChanged();
		scwin.setAllMenu();
	};

	/**
	 * → 페이지 언로드
	 */
	scwin.onpageunload = function() {
			
	};

	/**********************************************************************
	 * →  서브미션
	 **********************************************************************/
	/**
	 * → 즐겨찾는메뉴 저장완료
	 */
	scwin.sbm_saveMyMenu_submitdone = function(e) {
		scwin.checkList = [];
		com.closePopup('isOk');
	};

	/**********************************************************************
	 * →  함수
	 **********************************************************************/
	/**
	 * → 전체메뉴 셋팅
	 */
	scwin.setAllMenu = function() {
		dlt_menu.setJSON($p.parent().dlt_menu.getAllJSON());
		for (let i = 0; i < dlt_myMenu.getRowCount(); i++) {
			const menuId = dlt_myMenu.getCellData(i, 'service_id');
			let overlapIdx = dlt_menu.getMatchedIndex('serviceID', menuId)[0];
			if (overlapIdx != null) {
				dlt_menu.removeRow(overlapIdx);
			}
		}
		
		let allMenus = dlt_menu.getAllJSON();
		
		allMenus.reverse();
		allMenus.forEach( function(menu, i) {
			if (menu.childNode == "Y") {
				let overlapIdx = dlt_menu.getMatchedIndex('serviceCode', menu.serviceCode)[0];
				if (dlt_menu.getMatchedIndex('parentDivCode', menu.serviceCode).length <= 0) {
					dlt_menu.removeRow(overlapIdx);
				} else {
					dlt_menu.setCellData(overlapIdx, 'imgTypeKey', 'menuFolder');
				}
			}
		}); 

//		for (let i = 0; i < dlt_menu.getRowCount(); i++) {
//			const rowJson = dlt_menu.getRowJSON(i);
//			if (rowJson.bkmkMenuId.indexOf('FOLDER') > -1) {
//				if (dlt_menu.getMatchedIndex('parentId', rowJson.bkmkMenuName).length <= 0) {
//					debugger
//					dlt_menu.removeRow(i);
//					i -= 1;
//				} else {
//					dlt_menu.setCellData(i, 'imgTypeKey', 'menuFolder');
//				}
//			}
//		}
		
		dlt_tempAllMenu.setJSON(dlt_menu.getAllJSON());
		trv_menu.notifyDataChanged();
		trv_menu.spanAll(false);
		scwin.checkList = [dma_param, dlt_myMenu];
	};
	
	/**
	 * → 즐겨찾는메뉴 NULL 체크
	 */
	scwin.myMenuNull = function(nullChk) {
		if (nullChk) {
			dlt_myMenu.removeRow(dlt_myMenu.getMatchedIndex('service_id', 'MENU')[0]);
			scwin.myMenuNullChk = false;
		} else {
			dlt_myMenu.setRowData(0, ['', '', 'MENU', '', '', '1', '', com.getMsg('message.xom.mymenu.0011')], false);
			scwin.myMenuNullChk = true;
		}
	};

	/**
	 * → 폴더 넘버 체크
	 */
	scwin.folderNumChk = function(dltC, chkCol) {
		let cdArr = [];
		for (let i = 0; i < dltC.getRowCount(); i++) {
			const menuId = dltC.getCellData(i, chkCol);
			if (menuId.indexOf('FOLDER') > -1) {
				cdArr.push(parseInt(menuId.substring(6, 9)));
			}
		}

		let result;
		for (let j = 1; j <= 200; j++) {
			if (cdArr.indexOf(j) == -1) {
				if (j > 999) {
					result = 'fail';
					break;
				} else {
					result = 'FOLDER' + com.lpad(j, 3, '0');
					break;
				}
			}
		}

		return result;
	};
	
	/**
	 * → 트리뷰 스타일 제거
	 */
	scwin.getTrvCtrlEvent = function(trvC) {
		const trvEl = document.querySelector('#' + $p.getFrameId() + '_' + trvC.org_id);
		trvEl.querySelectorAll('span').forEach(function(n, i) {
			n.parentElement.style = '';
			n.style = '';
		});

		return trvEl.getElementsByClassName('w2treeview_over')[0];
	};

	/**
	 * → 트리뷰 드롭가능여부 체크
	 */
	scwin.isNoDropCheck = function(isDgMenu, dgN, dpN) {
		let result = false;
		if (!isDgMenu && dgN.depth < dpN.depth) {
			let selectN = dpN.parentNode;
			for (let i = dgN.depth; i < dpN.depth; i++) {
				if (dgN.depth >= selectN.depth) {
					if (dgN.value == selectN.value) {
						result = true;
					}
					break;
				}
				selectN = selectN.parentNode;
			}
		}
		return result;
	};
	
	/**
	 * → 트리뷰 우클릭 메뉴 생성
	 */
	scwin.createTreevMenu = function() {
		if ($p.getComponentById('grp_treevMenu') != undefined) {
			$p.getComponentById('grp_treevMenu').remove();
		}

		const grpTreevMenu = com.createComponent('grp_treevMenu', 'group', {
			className : 'treevMenu off'
		});

		for (let i = 0; i < scwin.contextList.length; i++) {
			let temp = com.createComponent('spa_content' + i, 'span', {}, grpTreevMenu);
			temp.setValue(scwin.contextList[i].label);
			temp.setUserData('value', scwin.contextList[i].value);
			temp.setUserData('section', i);
			//focus 및 onblur 함수를 적용하기 위해 tabindex 속성 추가
			document.getElementById(temp.id).setAttribute('tabindex', '-1');

			temp.bind('onblur', 'scwin.grp_treevMenu_onblur');
			temp.bind('onclick', 'scwin.grp_treevMenu_onclick');
		};
		//바디 태그에 인덱스 속성 및 onfocus 함수 적용
		document.getElementById(grp_treevMenu.id).setAttribute('tabindex', '-1');
		grp_treevMenu.bind('onblur', 'scwin.grp_treevMenu_onblur');
	};

	/**
	 * → 트리뷰 우클릭 메뉴 제거
	 */
	scwin.hideTreevMenu = function() {
		if ($p.getComponentById('grp_treevMenu') != undefined) {
			if (!grp_treevMenu.hasClass('off')) {
				grp_treevMenu.toggleClass('off');
			}
		}
	};

	/**********************************************************************
	 * →  컴포넌트
	 **********************************************************************/
	/**
	 * → 전체메뉴 열기/닫기 클릭 이벤트
	 */
	scwin.allMenuControll = function() {
		if (this.getUserData('userData1') == 'open')
			trv_menu.spanAll(true);
		else
			trv_menu.spanAll(false);
	};

	/**
	 * → 나의메뉴 열기/닫기 클릭 이벤트
	 */
	scwin.myMenuControll = function() {
		if (this.getUserData('userData1') == 'open')
			trv_myMenu.spanAll(true);
		else
			trv_myMenu.spanAll(false);
	};

	/**
	 * → 메뉴검색 버튼클릭 이벤트
	 */
	scwin.menuSearch = function() {
		var val = inp_menuNm.getValue();
		
		if (val.trim() == "") {
			scwin.setAllMenu();
			return;
		}

		var schMenuDlt = dlt_tempAllMenu;
		var menuObjArr = schMenuDlt.getMatchedJSON(gcm.MENU_INFO.MENU_NM, val, false);
		menuObj = menuObjArr.filter((obj) => {return obj.serviceID.indexOf("#") == -1});
		var arr = menuObj.reduce(function(r, a) {
			rootDivCode = a.parentDivCode;
		    r[rootDivCode] = r[rootDivCode] || [];
		    r[rootDivCode].push(a);
		    return r;
		}, Object.create(null));
		var replaceObj = [];
		Object.keys(arr).forEach(function(e) {
			replaceObj = replaceObj.concat(schMenuDlt.getMatchedJSON(gcm.MENU_INFO.MENU_ID, e, false));
		});
		replaceObj.map(e => e.serviceLevel = 1);
		replaceObj = replaceObj.concat(menuObj);
		replaceObj = replaceObj.filter(function(arr, index) {
					    return (
						        replaceObj.findIndex(function(e) {
						            return e.serviceCode === arr.serviceCode
						        }) === index
					    );
					});
		replaceObj.sort(function(a, b) {
			if (a.parentDivCode === b.serviceCode || b.parentDivCode === a.serviceCode) return 0;
			if (a.serviceCode   < b.serviceCode) return -1;
			if (a.serviceCode   > b.serviceCode) return 0;
			return 0;
		});
		dlt_menu.setJSON(replaceObj);
	}
	
	/**
	 * → 메뉴검색 키입력 이벤트
	 */
	scwin.inp_menuNm_onkeydown = function(e) {
		if(e.keyCode == '13')
			scwin.menuSearch();
	};
	
	/**
	 * → 새폴더 버튼 클릭 이벤트
	 */
	scwin.btn_add_onclick = function(e) {
		newMenuId = scwin.folderNumChk($p.getComponentById('dlt_myMenu'), 'service_id');
		if (newMenuId == 'fail') {
			com.messageDynamic('alert', 'message.xom.mymenu.0009');
			return;
		}
		
		let newName, nameChk, label = com.getMsg('message.xom.mymenu.0010');
		 
		do {
			newName = prompt(label, '새폴더');
			if (newName.length > 15) {
				label = com.getMsg('message.xom.wq.007', '15');
				nameChk = false;
			} else {
				nameChk = true;	
			}
		} while (!nameChk);
		
		if (newName) {
			newJson = {
				menu_lvl : '1',
				service_id : newMenuId,
				menu_folder_nm : newName,
				bkmkMenuUrl : '',
				menu_up_id : '',
				menu_seq : 0,
				imgTypeKey : 'menuFolder'
			};

			dlt_myMenu.setRowJSON(0, newJson, false);
			if (scwin.myMenuNullChk)
				scwin.myMenuNull(scwin.myMenuNullChk);
			trv_myMenu.notifyDataChanged();
		}
	};
	
	/**
	 * → 트리뷰 드래그 오버 이벤트(dg: drag, dp: drop, n: node, el: element)
	 */
	scwin.trv_myMenu_ondragover = function(dgN, dpN, dgCtrl, dpCtrl, e) {
		scwin.hideTreevMenu();
		const dpEl = scwin.getTrvCtrlEvent(dpCtrl);
		const isDgMenu = dgN.value.indexOf('FOLDER') == -1;
		const isDpMenu = dpN.value.indexOf('FOLDER') == -1;
		const topNum = isDpMenu ? 9 : 4;
		const botNum = isDpMenu ? 10 : 15;

		if (dgN.value != dpN.value && !scwin.isNoDropCheck(isDgMenu, dgN, dpN)) {
			const topN = dgN.depth == dpN.depth && dgN.depthIndex == dpN.depthIndex - 1
			const botN = dgN.depth == dpN.depth && dgN.depthIndex == dpN.depthIndex + 1

			if (e.offsetY <= topNum && (!topN || dgCtrl != dpCtrl)) {
				dpEl.parentElement.style = 'width: 100%; border-top:1px solid black';
			} else if (topNum < e.offsetY && e.offsetY < botNum) {
				dpEl.parentElement.style = 'width: 100%; border:1px solid black';
			} else if (botNum <= e.offsetY && (!botN || dgCtrl != dpCtrl)) {
				dpEl.parentElement.style = 'width: 100%; border-bottom:1px solid black';
			}
		} else {
			dpEl.style = 'cursor:no-drop';
		}
	};

	/**
	 * → 트리뷰 드래그 리브 이벤트
	 */
	scwin.trv_myMenu_ondragleave = function(e) {
		scwin.getTrvCtrlEvent(trv_myMenu);
	};

	/**
	 * → 트리뷰 드랍 이벤트(dg: drag, dp: drop, c: component, n: node, el: element)
	 */
	scwin.trv_myMenu_ondrop = function(dgN, dpN, dgCtrl, dpCtrl, e) {
		const dltC = $p.getComponentById('dlt_myMenu');

		if (scwin.getTrvCtrlEvent(dpCtrl) != undefined) {
			const menuObj = dlt_menu.getMatchedJSON("serviceCode", dgN.value);
			const isDgMenu = (menuObj.length != 0 && menuObj[0].childNode != "Y") &&
							 dgN.value.indexOf('FOLDER') == -1;
			const isDpMenu = dpN.value.indexOf('FOLDER') == -1;
			const topNum = isDpMenu ? 9 : 4;
			const botNum = isDpMenu ? 10 : 15;

			if (dgCtrl == dpCtrl && dgN.value != dpN.value) {
				const topN = dgN.depth == dpN.depth && dgN.depthIndex == dpN.depthIndex - 1
				const botN = dgN.depth == dpN.depth && dgN.depthIndex == dpN.depthIndex + 1
				if (isDgMenu) {
					let dgJson = [scwin.menuJsontoMyMenuJson(dltC.getRowJSON(dgN.index - 1))];
					if (e.offsetY <= topNum && !topN) {
						dltC.removeRow(dgN.index - 1);
						dgJson[0].menu_lvl = dpN.depth.toString();
						dgJson[0].menu_up_id = dpN.parentNode.value;
						dltC.insertJSON(dpN.index - 1, dgJson);
					} else if (topNum < e.offsetY && e.offsetY < botNum) {
						dltC.removeRow(dgN.index - 1);
						dgJson[0].menu_lvl = (dpN.depth + 1).toString();
						dgJson[0].menu_up_id = dpN.value;
						dltC.insertJSON(dpCtrl.getLastChildIndex(dpN.index), dgJson);
					} else if (botNum <= e.offsetY && !botN) {
						dltC.removeRow(dgN.index - 1);
						dgJson[0].menu_lvl = dpN.depth.toString();
						dgJson[0].menu_up_id = dpN.parentNode.value;
						dltC.insertJSON(dpCtrl.getLastChildIndex(dpN.index), dgJson);
					}
				} else if (!scwin.isNoDropCheck(isDgMenu, dgN, dpN)) {
					if (e.offsetY <= topNum && !topN) {
						dpTopN = dpCtrl.findNodeByIndex(dpN.index - 1);
						dltC.setCellData(dgN.index - 1, 'menu_up_id', dpN.parentNode.value);
						if (dpTopN.depth < dpN.depth && dpTopN.value.length != 4) {
							dpCtrl.moveNode(dgN.index, dpN.index - 1, true);
						} else if (dpTopN.depth > dpN.depth) {
							const sameDepthN = dltC.getMatchedIndex('menu_up_id', dpN.parentNode.value);
							const dpIndex = sameDepthN[sameDepthN.indexOf(dpN.index - 1) - 1];
							dpCtrl.moveNode(dgN.index, dpIndex + 1, false);
						} else {
							dpCtrl.moveNode(dgN.index, dpN.index - 1, false);
						}
					} else if (topNum < e.offsetY && e.offsetY < botNum) {
						dltC.setCellData(dgN.index - 1, 'menu_up_id', dpN.value);
						dpCtrl.moveNode(dgN.index, dpN.index, true);
					} else if (botNum <= e.offsetY && !botN) {
						dltC.setCellData(dgN.index - 1, 'menu_up_id', dpN.parentNode.value);
						dpCtrl.moveNode(dgN.index, dpN.index, false);
					}
				}
			} else if (dgCtrl != dpCtrl) {
				const dltAll = $p.getComponentById('dlt_menu');
				const dltTemp = $p.getComponentById('dlt_tempAllMenu');
				if (isDgMenu) {
					let dgJson = [scwin.menuJsontoMyMenuJson(dltAll.getRowJSON(dgN.index - 1))];
					const delMenuId = dltAll.getCellData(dgN.index - 1, 'serviceCode');
					dltAll.removeRow(dgN.index - 1);
					dltTemp.removeRow(dltTemp.getMatchedIndex('serviceCode', delMenuId)[0]);
					if (dltAll.getMatchedIndex('parentDivCode', dgJson[0].parentDivCode).length <= 0) {
						dltAll.removeRow(dltAll.getMatchedIndex('serviceCode', dgJson[0].parentDivCode)[0]);
						dltTemp.removeRow(dltTemp.getMatchedIndex('serviceCode', dgJson[0].parentDivCode)[0]);
					}

					for (let i = 0; i < dltAll.getRowCount(); i++) {
						const rowJson = dltAll.getRowJSON(i);
						if (rowJson.childNode == "Y") {
							if (dltAll.getMatchedIndex('parentDivCode', rowJson.serviceCode).length <= 0) {
								dltAll.removeRow(i);
								dltTemp.removeRow(dltTemp.getMatchedIndex('serviceCode', rowJson.serviceCode)[0]);
								i -= 1;
							} else {
								dltAll.setCellData(i, 'imgTypeKey', 'menuFolder');
							}
						}
					}

					if (e.offsetY <= topNum) {
						dgJson[0].menu_lvl = dpN.depth.toString();
						dgJson[0].menu_up_id = dpN.parentNode.value;
						dltC.insertJSON(dpN.index - 1, dgJson);
					} else if (topNum < e.offsetY && e.offsetY < botNum) {
						dgJson[0].menu_lvl = (dpN.depth + 1).toString();
						dgJson[0].menu_up_id = dpN.value;
						dltC.insertJSON(dpCtrl.getLastChildIndex(dpN.index), dgJson);
					} else {
						dgJson[0].menu_lvl = dpN.depth.toString();
						dgJson[0].menu_up_id = dpN.parentNode.value;
						dltC.insertJSON(dpCtrl.getLastChildIndex(dpN.index), dgJson);
					}
				} else {
					newMenuId = scwin.folderNumChk($p.getComponentById('dlt_myMenu'), 'service_id');
					if (newMenuId == 'fail') {
						com.alert("더 이상 폴더를 추가할 수 없습니다.");
						return;
					}

					let moveList = scwin.findChildMenu(dltAll, dgN.value);
					let newFolderId = "";
					const moveIndex = dltAll.getMatchedIndex('serviceCode', dgN.value)[0];
					moveList.unshift(dltAll.getRowJSON(moveIndex));
					let insIdx = dpCtrl.getLastChildIndex(dpN.index);
					let insDep = dpN.depth;
					let insPId = dpN.parentNode.value;

					if (e.offsetY <= topNum) {
						insIdx = dpN.index - 1;
					} else if (topNum < e.offsetY && e.offsetY < botNum) {
						insDep = insDep + 1;
						insPId = dpN.value;
					}
					let depthGap = 0;
					let topParentObj = {};
					let parentMovObj = {};
					dlt_tempMymenu.setJSON(dlt_myMenu.getAllJSON());
					let moveObj = null;
					for (let i = 0; i < moveList.length; i++) {
						if (dltAll.getMatchedJSON("parentDivCode", moveList[i].serviceCode).length == 0) {
							dltAll.removeRow(dltAll.getMatchedIndex('serviceCode', moveList[i].serviceCode));
							dltTemp.removeRow(dltTemp.getMatchedIndex('serviceCode', moveList[i].serviceCode));
						} 
						if (i == 0) {
							topParentObj = JSON.parse(JSON.stringify(moveList[0]));
							moveList[i].menu_lvl = insDep + '';
							moveList[i].serviceID = newMenuId;
							moveList[i].menu_up_id = insPId;
						} else {
							//topParentObj = dlt_allMenu.getMatchedJSON("serviceCode", moveList[i].parentDivCode)[0];
							parentMovObj = moveList.find((obj) => { return obj.serviceCode === moveList[i].parentDivCode});
							depthGap = Math.abs(Number(topParentObj.serviceLevel) - moveList[i].serviceLevel);
							moveList[i].menu_up_id = parentMovObj.serviceID;
							//moveList[i].parentId = newFolderId.indexOf("FOLDER") > -1 && depthGap != 1 ? newFolderId : newMenuId;
							moveList[i].menu_lvl = insDep + depthGap + '';
							
							if (moveList[i].childNode === "Y") {
								newFolderId = scwin.folderNumChk($p.getComponentById('dlt_tempMymenu'), 'service_id');

								if (newFolderId == 'fail') {
									com.alert("더 이상 폴더를 추가할 수 없습니다.");
									return;
								}
								
								moveList[i].serviceID = newFolderId;
							}
						}
						moveObj = scwin.menuJsontoMyMenuJson(moveList[i]);

						dlt_addMenu.setRowJSON(i, moveObj, false);
						dlt_tempMymenu.setRowJSON(insIdx + i, moveObj, false);
					}
					dlt_myMenu.insertJSON(insIdx, dlt_addMenu.getAllJSON());
					dlt_addMenu.removeAll();
				}
			}
			if (scwin.myMenuNullChk)
				scwin.myMenuNull(scwin.myMenuNullChk);
		}
		dpCtrl.notifyDataChanged();
	};

	/**
	 * → 재귀하며 하위 메뉴를 불러온다.
	 */
	scwin.findChildMenu = function(dltAll, serviceCode) {
		var moveList = dltAll.getMatchedJSON('parentDivCode', serviceCode);
		var retList  = [];
		
		moveList.forEach(function(moveObj, index) {
			retList.push(moveObj);
			
			if (moveObj.childNode === "Y") {
				retList = retList.concat(scwin.findChildMenu(dltAll, moveObj.serviceCode));
			}
		});
		
		return retList;
	};

	/**
	 * 메뉴 객체에서 나의 메뉴 구조로 매핑한다.
	 */
	scwin.menuJsontoMyMenuJson = function(menuObj) {
		let retJson = {
			chk				: "",
			syspayno		: com.getLoginInfo("sn"),
			service_id		: menuObj["serviceID"],
			menu_id			: menuObj["serviceCode"],
			menu_up_id		: menuObj.menu_up_id || "",
			menu_lvl		: menuObj.menu_lvl || "",
			menu_seq		: menuObj.menu_seq || "",
			menu_folder_nm	: menuObj["cn"],
			parentDivCode	: menuObj["parentDivCode"]
		};

		return retJson;
	};
	
	/**
	 * → 트리뷰 우클릭 이벤트
	 */
	scwin.trv_myMenu_onrightbuttonclick = function(node, leftPosition, topPosition) {
		if (node.value != 'MENU') {
			scwin.node = node;
			scwin.createTreevMenu();

			if (grp_treevMenu.hasClass('off')) {
				grp_treevMenu.setStyle('top', topPosition + 'px');
				grp_treevMenu.setStyle('left', leftPosition + 'px');
				grp_treevMenu.toggleClass('off');
				grp_treevMenu.focus();
			}
		}
	};

	/**
	 * → 트리뷰 우클릭 메뉴 포커스아웃 이벤트
	 */
	scwin.grp_treevMenu_onblur = function(e) {
		const relatedTarget = e.relatedTarget;

		if (relatedTarget != null && relatedTarget != undefined) {
			for (let i = 0; i < scwin.contextList.length; i++) {
				if (relatedTarget.id == $p.getComponentById('spa_content' + i).id)
					return;
			}
		}
		scwin.hideTreevMenu();
	};

	/**
	 * → 트리뷰 우클릭 메뉴 포커스아웃 이벤트
	 */
	scwin.grp_myMenu_onclick = function(e) {
		scwin.hideTreevMenu();
	};

	/**
	 * → 트리뷰 우클릭 메뉴 버튼 클릭 이벤트
	 */
	scwin.grp_treevMenu_onclick = function() {
		scwin.hideTreevMenu();
		const clickValue = this.getUserData('value');
		const rowIdx = dlt_myMenu.getMatchedIndex('service_id', scwin.node.value, true)[0];

		switch (clickValue) {
			case 'update' :
				const orgName = dlt_myMenu.getCellData(rowIdx, 'menu_folder_nm');
				const reName = prompt(com.getMsg('message.xom.mymenu.0013'), orgName);

				if (orgName != reName && reName != null) {
					com.confirm(com.getMsg("message.xom.mymenu.0014", [reName]), function(rtn) {
						if (rtn) {
							dlt_myMenu.setCellData(rowIdx, 'menu_folder_nm', reName);
							trv_myMenu.notifyDataChanged();
						}
					});
				}
				break;
			case 'delete' :
				com.confirm(com.getMsg("message.xom.mymenu.0015"), function(rtn) {
					if (rtn) {
						dlt_myMenu.removeRow(rowIdx);
						if (dlt_myMenu.getRowCount() == 0)
							scwin.myMenuNull(scwin.myMenuNullChk);
						trv_myMenu.notifyDataChanged();
						dma_param.set('delDiv', '1');
						scwin.setAllMenu();
					}
				});
				break;
			default :
				break;
		}
	};
	
	/**
	 * → 취소 버튼 클릭 이벤트
	 */
	scwin.btn_cancel_onclick = function(e) {
		com.closePopup();
	};

	/**
	 * → 저장 버튼 클릭 이벤트
	 */
	scwin.btn_save_onclick = async function(e) {
		// com.setValidGrid로 설정한 정보로 유효성 체크
		com.confirm('message.xom.wq.017'/*저장 하시겠습니까?*/, async function(ret) {
			if (ret) {
				for (let i = 0; i < dlt_myMenu.getRowCount(); i++) {
					dlt_myMenu.setCellData(i, 'menu_seq', i + 1);
					dlt_myMenu.setCellData(i, 'deleteAt', 0);
				}
				let deletedArr = dlt_myMenu.getDeletedJSON();

				deletedArr.map((obj, index) => { 
					if (dlt_myMenu.getMatchedJSON("service_id", obj.service_id.trim(), false).length <= 0) {
						obj.deleteAt = 1; obj.rowStatus = "U"
					} else {
						deletedArr[index] = dlt_myMenu.getMatchedJSON("service_id", obj.service_id.trim(), false)[0];
					}
				});

				await com.execute(sbm_saveMyMenu, {requestData : {"delMyMenuVoList" : deletedArr, "mymenuVoList" : dlt_myMenu.getModifiedJSON()}});
				scwin.checkList = [];
				$p.top().wfm_side.scope.scwin.searchMyMenu();
				com.closePopup();
			}
		});
	};
	
scwin.inp_menuNm_onkeypress = function(e) {
	if(e.keyCode == '13')
		scwin.menuSearch();
};

scwin.inp_menuNm_onblur = function(e) {
	if (this.getValue().trim() == "")
		scwin.setAllMenu();
};
]]></script>
	<style>
		.center_btns {
					    width: 100px;
					    display: flex;
					    flex-direction: column;
					    align-items: center;
					    justify-content: center;
				    }
		/* TreeView Content */
		.treevMenu {width:auto;border : 1px solid black;position : absolute;background-color: white;white-space:pre;padding: 5px 20px 5px 10px;z-index: 10000;}
		.treevMenu.off {display: none;}
		.treevMenu span {font-weight : 300; line-height : 1.8;}
		.treevMenu span:hover {font-weight : bold; cursor: pointer;}
	</style>
	</head>
	<body ev:onpageload="scwin.onpageload">
		<xf:group class="pop_contents" id="" style="">
			<xf:group class="titleSection" id="" style="margin-top: 0;">
				<xf:group class="le" id="">
					<w2:textbox class="tit_tbl" id="" label="나의메뉴" style="" tagname="h3"></w2:textbox>
					<xf:group class="result" id=""></xf:group>
				</xf:group>
			</xf:group>
			<xf:group style="margin-bottom: 5px;height: 22px;">
				<xf:group style="float:left;" id="" class="le">
					<w2:anchor class="ico_fold" id="btn_fold" outerDiv="false" style="" tooltip="모두접기"
	   					ev:onclick="scwin.allMenuControll" userData1="close">
	   					<xf:label><![CDATA[메뉴접기]]></xf:label>
	   				</w2:anchor>
	   				<w2:anchor class="ico_list" id="btn_expand" outerDiv="false" style="" tooltip="모두펼치기"
	   					ev:onclick="scwin.allMenuControll" userData1="open">
	   					<xf:label><![CDATA[메뉴펼치기]]></xf:label>
	   				</w2:anchor>
					<xf:input adjustMaxLength="false" style="margin-left:35px;" id="inp_menuNm" class="inp" title="" ev:onkeypress="scwin.inp_menuNm_onkeypress" ref="" ev:onblur="scwin.inp_menuNm_onblur"></xf:input>
					<xf:trigger style="" id="btn_search_menu" type="button" class="btn" title="" ev:onclick="scwin.menuSearch">
						<xf:label><![CDATA[검색]]></xf:label>
					</xf:trigger>
				</xf:group>
				<xf:group style="float:right;" id="" class="ri">
					<xf:trigger class="btn" id="btn_add" style="margin-right:10px;" type="button" ev:onclick="scwin.btn_add_onclick">
						<xf:label>
					<![CDATA[새폴더]]></xf:label>
					</xf:trigger>
					<w2:anchor class="ico_fold" id="btn_myMenu_fold" outerDiv="false" style="" tooltip="모두접기"
	   					ev:onclick="scwin.myMenuControll" userData1="close">
	   				</w2:anchor>
	   				<w2:anchor class="ico_list" id="btn_myMenu_expand" outerDiv="false" style="" tooltip="모두펼치기"
	   					ev:onclick="scwin.myMenuControll" userData1="open">
	   				</w2:anchor>
				</xf:group>
			</xf:group>
			<xf:group style="width:100%;height:100%;display:flex;justify-content:space-between;" id="grp_mymenuOuter">
				<w2:treeview class="treev" dataType="listed" id="trv_menu"
					style="width: 45%;height: 400px;border-radius:5px; background:#fff; border:1px solid #b1b8c9; padding:10px;" tooltipGroupClass="false"
					useDrag="true" ev:ondragleave="scwin.trv_myMenu_ondragleave">
					<w2:itemset nodeset="data:dlt_menu">
						<w2:label ref="cn"></w2:label>
						<w2:value ref="serviceCode"></w2:value>
						<w2:depth ref="serviceLevel"></w2:depth>
						<w2:folder ref=""></w2:folder>
						<w2:checkbox ref=""></w2:checkbox>
						<w2:checkboxDisabled ref=""></w2:checkboxDisabled>
						<w2:image ref=""></w2:image>
						<w2:iconImage ref="iconId"></w2:iconImage>
						<w2:selectedImage ref=""></w2:selectedImage>
						<w2:expandedImage ref=""></w2:expandedImage>
						<w2:leafImage ref=""></w2:leafImage>
					</w2:itemset>
				</w2:treeview>
				<w2:treeview class="treev" dataType="listed" id="trv_myMenu"
					style="width: 45%;height: 400px;border-radius:5px; background:#fff; border:1px solid #b1b8c9; padding:10px;" tooltipGroupClass="false"
					useDrag="true" ev:ondrop="scwin.trv_myMenu_ondrop" ev:ondragover="scwin.trv_myMenu_ondragover"
					ev:onrightbuttonclick="scwin.trv_myMenu_onrightbuttonclick" ev:ondragleave="scwin.trv_myMenu_ondragleave" dynamicAppend="true"
					ev:onclick="scwin.trv_myMenu_onclick">
					<w2:itemset nodeset="data:dlt_myMenu">
						<w2:label ref="menu_folder_nm"></w2:label>
						<w2:value ref="service_id"></w2:value>
						<w2:depth ref="menu_lvl"></w2:depth>
						<w2:folder ref=""></w2:folder>
						<w2:checkbox ref=""></w2:checkbox>
						<w2:checkboxDisabled ref=""></w2:checkboxDisabled>
						<w2:image ref=""></w2:image>
						<w2:iconImage ref="iconId"></w2:iconImage>
						<w2:selectedImage ref=""></w2:selectedImage>
						<w2:expandedImage ref=""></w2:expandedImage>
						<w2:leafImage ref=""></w2:leafImage>
					</w2:itemset>
				</w2:treeview>
			</xf:group>

			<xf:group class="btnGroup" id="" style="">
				<xf:group class="le" id="" style=""></xf:group>
				<xf:group class="ri" id="">
					<xf:trigger class="btn pro" id="btn_cancel" style="" type="button" ev:onclick="scwin.btn_cancel_onclick">
						<xf:label><![CDATA[취소]]></xf:label>
					</xf:trigger>
					<xf:trigger class=" btn pro conf" id="btn_save" style="" type="button" ev:onclick="scwin.btn_save_onclick">
						<xf:label><![CDATA[저장]]></xf:label>
					</xf:trigger>
				</xf:group>
			</xf:group>

		</xf:group>


	</body>
</html>